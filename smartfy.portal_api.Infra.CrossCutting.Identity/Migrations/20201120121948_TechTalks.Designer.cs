// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using smartfy.portal_api.Infra.CrossCutting.Identity.Data;

namespace smartfy.portal_api.Infra.CrossCutting.Identity.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201120121948_TechTalks")]
    partial class TechTalks
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("smartfy.portal_api.Infra.CrossCutting.Identity.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("Enabled");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("smartfy.portal_api.domain.Entities.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("Excluded");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("smartfy.portal_api.domain.Entities.Camera", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("DtActivation");

                    b.Property<DateTime>("DtLastCopy");

                    b.Property<DateTime>("DtLastSeen");

                    b.Property<bool>("Excluded");

                    b.Property<bool>("InOperation");

                    b.Property<long>("LastTotalLength");

                    b.Property<long>("LastUsageLength");

                    b.Property<string>("Manufacturer");

                    b.Property<string>("Model");

                    b.Property<Guid>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Cameras");
                });

            modelBuilder.Entity("smartfy.portal_api.domain.Entities.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("CPF");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("Excluded");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("smartfy.portal_api.domain.Entities.Despacho", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClienteId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("DtEntrega");

                    b.Property<DateTime>("DtEnvio");

                    b.Property<DateTime>("DtRecebimento");

                    b.Property<bool>("Excluded");

                    b.Property<bool>("IsDelivered");

                    b.Property<Guid>("ProdutoId");

                    b.HasKey("Id");

                    b.ToTable("Despacho");
                });

            modelBuilder.Entity("smartfy.portal_api.domain.Entities.Disk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<Guid>("DockstationId");

                    b.Property<DateTime>("DtLastCopy");

                    b.Property<bool>("Excluded");

                    b.Property<long>("LengthGB");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("DockstationId");

                    b.ToTable("Disks");
                });

            modelBuilder.Entity("smartfy.portal_api.domain.Entities.Dockstation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("DtActivation");

                    b.Property<DateTime>("DtLastCopy");

                    b.Property<DateTime>("DtLastSeen");

                    b.Property<bool>("Excluded");

                    b.Property<long>("LastTotalLength");

                    b.Property<long>("LastUsageLength");

                    b.Property<Guid>("PartnerId");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("Dockstations");
                });

            modelBuilder.Entity("smartfy.portal_api.domain.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CameraId");

                    b.Property<string>("Checksum");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DirectoryName");

                    b.Property<Guid>("DiskId");

                    b.Property<DateTime>("DtCopy");

                    b.Property<bool>("Excluded");

                    b.Property<string>("Extension");

                    b.Property<string>("FullPath");

                    b.Property<int>("HashCode");

                    b.Property<DateTime>("LastAccessTime");

                    b.Property<DateTime>("LastWriteTime");

                    b.Property<long>("Length");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CameraId");

                    b.HasIndex("DiskId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("smartfy.portal_api.domain.Entities.Partner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Contact");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Email");

                    b.Property<bool>("Excluded");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("smartfy.portal_api.domain.Entities.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Codigo");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Descricao");

                    b.Property<bool>("Excluded");

                    b.HasKey("Id");

                    b.ToTable("Produto");
                });

            modelBuilder.Entity("smartfy.portal_api.domain.Entities.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("Excluded");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("smartfy.portal_api.domain.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AreaId");

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("DtActivation");

                    b.Property<DateTime>("DtLastCopy");

                    b.Property<DateTime>("DtLastSeen");

                    b.Property<bool>("Excluded");

                    b.Property<Guid>("PartnerId");

                    b.Property<string>("Plate");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("PartnerId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("smartfy.portal_api.Infra.CrossCutting.Identity.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("smartfy.portal_api.Infra.CrossCutting.Identity.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("smartfy.portal_api.Infra.CrossCutting.Identity.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("smartfy.portal_api.Infra.CrossCutting.Identity.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("smartfy.portal_api.domain.Entities.Camera", b =>
                {
                    b.HasOne("smartfy.portal_api.domain.Entities.Team", "Team")
                        .WithMany("Cameras")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("smartfy.portal_api.domain.Entities.Disk", b =>
                {
                    b.HasOne("smartfy.portal_api.domain.Entities.Dockstation", "Dockstation")
                        .WithMany("Disks")
                        .HasForeignKey("DockstationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("smartfy.portal_api.domain.Entities.Dockstation", b =>
                {
                    b.HasOne("smartfy.portal_api.domain.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("smartfy.portal_api.domain.Entities.File", b =>
                {
                    b.HasOne("smartfy.portal_api.domain.Entities.Camera", "Camera")
                        .WithMany("Files")
                        .HasForeignKey("CameraId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("smartfy.portal_api.domain.Entities.Disk", "Disk")
                        .WithMany("Files")
                        .HasForeignKey("DiskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("smartfy.portal_api.domain.Entities.Team", b =>
                {
                    b.HasOne("smartfy.portal_api.domain.Entities.Area", "Area")
                        .WithMany("Teams")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("smartfy.portal_api.domain.Entities.Partner", "Partner")
                        .WithMany("Teams")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
